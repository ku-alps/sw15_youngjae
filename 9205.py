test_case = int(input()) #테스트 개수
result_case = [0]*test_case #결과 변수
home_arr    = [[0]*2 for i in range(int(test_case))]
festival_arr = [[0]*2 for i in range(int(test_case))]
def dfs(v,n,k): # v: dfs 시작 하는 값, n:인접행렬 크기, k: k번째 테스트
    global visit,adjacent_arr,result_case
    visit[v] = 1
    if(int(v) == int(n-1)):
        result_case[k] = 1
    for i in range(0,n):
        if(visit[i] == 0 and adjacent_arr[v][i] == 1):
            dfs(i,n,k)


#==================================================================================================
# 경우의 수 만큼 반복
#==================================================================================================
for i in range(0,test_case):

    convenience_store = int(input()) #편의점의 개수
    convenience_arr = [[0]*2 for i in range(int(convenience_store))] #편의점 좌표 넣을 변수 초기화
    adjacent_arr = [[0]*(convenience_store+2) for i in range(int(convenience_store+2))] # 인접행렬 초기화
    visit = [0]*(convenience_store+2)   #방문했는지 체크 하는 변수 초기화

    #==================================================================================================
    # 집 입력
    #==================================================================================================
    location_arr    = [] # 좌표 다 담고 있는 배열
    home_str = input() #집 좌표
    home_str = home_str.split()
    home_arr[i][0] = int(home_str[0]) #집 x좌표 추가
    home_arr[i][1] = int(home_str[1]) #집 y좌표 추가
    location_arr.append(home_arr[i]) #집 좌표 추가
    #==================================================================================================

    #==================================================================================================
    # 편의점 입력
    #==================================================================================================
    for k in range(0,convenience_store):
        convenience_str = input() #편의점 좌표
        convenience_str = convenience_str.split()
        convenience_arr[k][0] = int(convenience_str[0]) #편의점 x좌표 추가
        convenience_arr[k][1] = int(convenience_str[1]) #편의점 y좌표 추가
        location_arr.append(convenience_arr[k])
    #==================================================================================================

    #==================================================================================================
    # 펜타포트 입력
    #==================================================================================================
    festival_str = input() #펜타포트 좌표
    festival_str = festival_str.split()
    festival_arr[i][0] = int(festival_str[0]) #펜타포트 x좌표 추가
    festival_arr[i][1] = int(festival_str[1]) #펜타포트 y좌표 추가
    location_arr.append(festival_arr[i])
    #==================================================================================================
    
    #==================================================================================================
    # 인접행렬 생성부분
    #==================================================================================================
    for j in range(0,len(location_arr)):
        for k in range(0,len(location_arr)):
            chk = abs(location_arr[j][0]-location_arr[k][0])+abs(location_arr[j][1]-location_arr[k][1])
            if(chk <= 1000 and j != k):
                adjacent_arr[j][k] = 1
    #==================================================================================================
    dfs(0,convenience_store+2,i)
#==================================================================================================
# 경우의 수 만큼 반복 종료
#==================================================================================================

#==================================================================================================
# 결과출력
#==================================================================================================
for i in range(0,len(result_case)):
    if(result_case[i] == 1):
        print("happy")
    else:
        print("sad")
#==================================================================================================